using System;
using System.Collections.Generic;
using System.Linq;
using System.Management;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

public class HardwareInfo
{
    public string GetAppName()
    {
        return "LoPhongCorporation";
    }
    public string GetCPUId()
    {
        string cpuId = string.Empty;
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT ProcessorId FROM Win32_Processor");

        foreach (ManagementObject obj in searcher.Get())
        {
            cpuId = obj["ProcessorId"].ToString();
            break;
        }

        return cpuId;
    }

    public string GetHDDSerialNumbers()
    {
        List<string> hddSerials = new List<string>();
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT SerialNumber FROM Win32_DiskDrive");

        foreach (ManagementObject obj in searcher.Get())
        {
            string hddSerial = obj["SerialNumber"].ToString();
            hddSerials.Add(hddSerial);
        }

        return string.Join("_", hddSerials);
    }


    public string GetBIOSVersion()
    {
        string biosVersion = string.Empty;
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS");

        foreach (ManagementObject obj in searcher.Get())
        {
            biosVersion = obj["Version"].ToString();
            break; 
        }

        return biosVersion;
    }

    public string GenerateProductID()
    {
        string appName = GetAppName();
        string cpuId = GetCPUId();
        string hddSerial = GetHDDSerialNumbers();
        string biosVersion = GetBIOSVersion();

        string combinedInfo = $"{appName}-{cpuId}-{hddSerial}-{biosVersion}";

        // Hash the combined information
        string hashedInfo = CalculateMD5Hash(combinedInfo);

        // Format the product ID
        string formattedProductID = FormatProductID(hashedInfo);

        return formattedProductID;
    }

    private string CalculateMD5Hash(string input)
    {
        using (MD5 md5 = MD5.Create())
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            byte[] hashBytes = md5.ComputeHash(inputBytes);

            StringBuilder sb = new StringBuilder();
            foreach (byte b in hashBytes)
            {
                sb.Append(b.ToString("X2"));
            }
            return sb.ToString();
        }
    }

    private string FormatProductID(string input)
    {
        string formatted = input.Substring(0, 5) + "-" + input.Substring(5, 5) + "-" + input.Substring(10, 5) + "-" + input.Substring(15, 5) + "-" + input.Substring(20, 5);
        return formatted.ToUpper();
    }
}

class Program
{
    static void Main(string[] args)
    {
        HardwareInfo hardwareInfo = new HardwareInfo();
        string productID = hardwareInfo.GenerateProductID();
        Console.WriteLine("Product ID: " + productID);

        Console.ReadLine();
    }
}
